# Fix SSH agent socket
if [ -S "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$HOME/.ssh/ssh_auth_sock" ]; then
    mkdir -p "$HOME/.ssh/"
    ln -sf "$SSH_AUTH_SOCK" "$HOME/.ssh/ssh_auth_sock"
fi
export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"

# tmux setup
[ -t 1 ] && [ -z "$TMUX" ] && [ -z "$VSCODE" ] && [ -f ~/.tmux-auto ] && [ -x ~/bin/tmx ] && ~/bin/tmx

# Path
export PATH=".:$HOME/bin:$HOME/.local/bin:$PATH"

# Editor
export SVN_EDITOR=vim
export EDITOR=vim

# GitHub cli (gh)
export GH_BROWSER="iterm-open-url.sh"

# Aliases
alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"
alias ls="ls -F --color=auto"
alias ll="ls -lh"
alias la="ll -A"
alias grep="grep --color=auto"
alias dh='df -H'
alias ptt="ssh bbsu@ptt.cc"
alias p2="ssh bbsu@ptt2.cc"
alias g="git"
alias gap="git add -p"
alias gcm="git commit -m"
alias gcsm="git commit --signoff -m"
alias gd="git diff"
alias gdf="git --no-pager diff --name-only"
alias gds="git diff --staged"
alias gdw="git diff --word-diff"
alias gr="git remote -v"
alias gs="git status"
alias gspp="git stash; git pull; git stash pop"
alias ev="vim ~/.vimrc"
alias eb="vim ~/.bashrc"
alias ebl="vim ~/.bashrc.local"
alias et="vim ~/.tmux.conf"
alias en="vim ~/.config/nvim"
alias p="perl -e 'print \$_, \"\\n\" for split /:/, \$ENV{PATH}'"
alias svndi="svn di | colordiff"
alias dps='docker ps --format "table {{.Names}}\t{{.ID}}\t{{.Networks}}\t{{.Status}}\t{{.RunningFor}}"'
alias dpsa='docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Networks}}\t{{.Status}}\t{{.RunningFor}}"'
alias dpse='docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Networks}}\t{{.Status}}\t{{.RunningFor}}" --filter status=exited'
alias drm="docker rm"
alias drmi="docker rmi"
alias dstop="docker stop"
alias dstart="docker start"
alias sshn="ssh -o StrictHostKeyChecking=no"
alias vim="nvim"
alias vimu="vim -u /dev/null"
alias list-pipenv='for venv in ~/.local/share/virtualenvs/* ; do basename $venv; cat $venv/.project | sed "s/\(.*\)/\t\1\n/" ; done'
alias psgrep="ps aux | grep -vE '(ps|grep)' | grep -i"

# dircolors
[ -f ~/.dircolors ] && command -v dircolors &>/dev/null && eval $(dircolors -b ~/.dircolors)
[ -f ~/.dircolors ] && command -v gdircolors &>/dev/null && eval $(gdircolors -b ~/.dircolors)

# eza
command -v eza &>/dev/null && alias ls="eza --icons --color --git"

# pyenv
command -v pyenv &>/dev/null && eval "$(pyenv init -)"

# cargo
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# ghc
[ -f "$HOME/.ghcup/env" ] && source "$HOME/.ghcup/env"

# foundry
[ -d "$HOME/.foundry/bin" ] && export PATH="$HOME/.foundry/bin:$PATH"

# wasmedge
[ -f "$HOME/.wasmedge/env" ] && source "$HOME/.wasmedge/env"

# Functions
function len { echo ${#1}; }
function mkcd { mkdir -p "$@" && cd "$@"; }
function newx { touch "$1" && chmod +x "$1"; }

function t {
    if [ `uname` = 'Darwin' ]; then
        date -r "$1"
    else
        date -d "+@$1"
    fi
}

function ip {
    if [ -z "$1" ]; then
        if [ `uname` = 'Darwin' ]; then
            local interface='en0'
        else
            local interface='eth0'
        fi
    else
        local interface="$1"
    fi
    ifconfig "$interface" | sed -En 's/.*inet ([^ ]+).*/\1/p'
}

function remove_known_host {
    [ -n "$1" ] && sed -i '' "$1d" ~/.ssh/known_hosts
}

function forward_port_local {
    local host="$1"
    local port="$2"
    [ -z "$port" ] && echo "$FUNCNAME <host> <port>" && return
    [ -z "$host" ] && echo "$FUNCNAME <host> <port>" && return
    ssh -L "${port}:localhost:${port}" -N "$host"
}

function pchome {
    echo "在 PChome 24 上搜尋 $* ..."
    curl -s --get \
        --data-urlencode "q=$*" \
        --data-urlencode 'sort=sale/dc' \
        'https://ecshweb.pchome.com.tw/search/v3.3/all/results' \
        | jq -r '.prods[] | "- $" + (.price | tostring) + "\t" + .name + "\thttps://24h.pchome.com.tw/prod/" + .Id'
}

# Colorful man page
if [ $TERM = "xterm-256color" ]; then
    export PAGER="`which less` -s"
    export BROWSER="$PAGER"
    export LESS_TERMCAP_mb=$'\E[38;5;167m' # begin blinking
    export LESS_TERMCAP_md=$'\E[38;5;39m' # begin bold
    export LESS_TERMCAP_me=$'\E[0m' # end mode
    export LESS_TERMCAP_se=$'\E[38;5;231m' # end standout-mode
    export LESS_TERMCAP_so=$'\E[38;5;167m' # begin standout-mode - info box
    export LESS_TERMCAP_us=$'\E[38;5;167m' # begin underline
    export LESS_TERMCAP_ue=$'\E[0m' # end underline
    export LESS_TERMCAP_uz=$'\E[0m' # just for export looking by dm4
fi

# macOS
if [ `uname` = "Darwin" ]; then
    # https://support.apple.com/zh-tw/HT208050
    export BASH_SILENCE_DEPRECATION_WARNING=1

    # alias
    alias app="open -a"
    alias hide="chflags hidden ~/Desktop/*"
    alias show="chflags nohidden ~/Desktop/*"
    alias xcode="find . -name '*.xcodeproj' -exec open {} \;"
    alias lsusb="system_profiler SPUSBDataType"
    alias lsb_release="system_profiler SPSoftwareDataType"
    alias flush_dns_cache="sudo killall -HUP mDNSResponder"
    alias adapter="ioreg -rw0 -c AppleSmartBattery | grep AppleRawAdapterDetails | cut -d'=' -f2- | tr '()=' '[]:' | sed 's/No/false/g' | jq"

    # ENV variables
    export PATH="/opt/homebrew/bin:$PATH"
    export GOPATH="$HOME/work/go"
    export GOROOT="$(brew --prefix golang)/libexec"
    export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"
    export PATH="/Applications/Visual Studio Code.app/Contents/Resources/app/bin:$PATH"

    # autojump
    [ -f `brew --prefix`/etc/autojump.sh ] && . `brew --prefix`/etc/autojump.sh

    # gpg-agent for ssh
    [ -S $HOME/.gnupg/S.gpg-agent.ssh ] && ln -sf "$HOME/.gnupg/S.gpg-agent.ssh" "$HOME/.ssh/ssh_auth_sock"

    # chruby
    [ -f `brew --prefix`/opt/chruby/share/chruby/chruby.sh ] && . `brew --prefix`/opt/chruby/share/chruby/chruby.sh
    [ -f `brew --prefix`/opt/chruby/share/chruby/auto.sh ] && . `brew --prefix`/opt/chruby/share/chruby/auto.sh
fi

# Linux
if [ `uname` = "Linux" ]; then
    # ENV variables
    export GOPATH=${HOME}/go
    export PATH=$GOPATH/bin:$PATH:/usr/local/go/bin

    # Aliases
    alias gnome-logout='gnome-session-quit --logout --no-prompt'

    # autojump
    [ -f /usr/share/autojump/autojump.bash ] && . /usr/share/autojump/autojump.bash

    # numlockx for Keychron bluetooth keyboards
    command -v numlockx &>/dev/null && xhost &>/dev/null && numlockx off
fi
